{
    "collab_server" : "",
    "contents" : "# Coursera Data Science Specialization\n# Reproducible Research\n# Peer Assessment Project 1\n# func.R\n\n# ---- summateFunc\nsummate <- function(x, v=\"date\", f=\"sum\") {\n  # This function groups and summarizes the data \n  #\n  # Args:\n  #   x: the dataframe to be summarized\n  #   v: the variable by which the data frame shall be grouped.  Valid values are \"date\" and \"interval\"\n  #   f: the summary function to be used.  Valid values are \"sum\" and \"mean\"\n  #\n  # Returns: Data frame grouped and summarized by the requested statistic\n  \n  # Validate arguments\n  if (missing(x)) { stop(\"Data frame to be summarized must be provided\") }\n  if (!any(v == c(\"date\", \"interval\"))) { stop(\"Invalid variable name\") }\n  if (!any(f == c(\"sum\", \"mean\"))) { stop(\"Invalid function name\") }\n  \n  # Perform summation\n  if (v == \"date\" & f == \"sum\") { \n    df <- x %>% group_by(date) %>% summarize(steps = sum(steps))\n  } else if (v == \"interval\" & f == \"sum\") {\n    df <- x %>% group_by(interval) %>% summarize(steps = sum(steps))\n  } else if (v == \"date\" & f == \"mean\") {\n    df <- x %>% group_by(date) %>% summarize(steps = mean(steps))\n  } else {\n    df <- x %>% group_by(interval) %>% summarize(steps = mean(steps))\n  }\n  \n  return(df)\n}\n# ---- end\n\n# ---- computeStatsFunc\ncomputeStats <- function(x) {\n  # This function calculates summary statistics and stores the data in a data.table for later use. \n  #\n  # Args:\n  #   x: the dataframe to be summarized\n  #\n  # Returns: Data table of summary statistics for the dataset.  \n  \n  # Validate arguments\n  if (missing(x)) { stop(\"Data frame to be summarized must be provided\") }\n  \n  # Gather summary statistics\n  min   <- min(x$steps)\n  q1    <- unname(quantile(x$steps,probs=0.25))\n  med   <- median(x$steps)\n  mn    <- mean(x$steps)\n  q3    <- unname(quantile(x$steps,probs=0.75))\n  mx    <- max(x$steps)\n  \n  # Prepare summary statistics table\n  No      <- c(1,2,3,4,5,6)\n  Measure <- c(\"Minimum\", \"25th Percentile\", \"Median\", \"Mean\", \"75th Percentile\", \"Maximum\")\n  Steps   <- c(min, q1, med, mn, q3, mx)\n  stbl    <- data.frame(No, Measure, Steps)\n\n  return(stbl)\n\n}\n# ---- end\n\n\n# ---- makeHistFunc\nmakeHist <- function(x,s) {\n  # Produces a histogram of the total number of steps by day with a summary statistics table\n  #\n  # Args:     x - A dataframe containing the total number of steps taken by day.\n  #\n  # Returns:  ggplot object containing the histogram plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n\n  # Prepare summary statistics table plot\n  s <- select(s, Measure, Steps)\n  tt  <- ttheme_minimal(base_size = 10)\n  g   <- tableGrob(s, theme=tt, rows=NULL)\n\n  # Prepare histogram\n  h <- ggplot(x, aes(x=steps)) +\n    geom_histogram(aes(fill = ..count..), na.rm = TRUE) +\n    scale_fill_gradient(\"Frequency\", low = \"green\", high = \"red\") +\n    xlab(\"Steps Per Day\") +\n    ylab(\"Frequency\") +\n    labs(title = \"Total Steps Taken Each Day\") +\n    theme_bw(base_family = \"sans\") +\n    annotation_custom(g, xmin=0, xmax = 8000, ymin = 5, ymax = 8)\n\n  # Render histogram and summary statistics to screen\n  suppressMessages(print(h))\n\n  # Return combined graphic.\n  return(h)\n}\n# ---- end\n\n\n\n# ---- plotSaveFunc\nplotSave <- function(x, f){\n  # Saves plots in png format to the exploratory figures or the final figures directories.\n  #\n  # Args:     \n  #   x:    a ggplot object  \n  #   f:    name of file in which the plot will be saved \n  #\n  # Returns:  \n  #   Plot saved in designated figure folder.\n  \n  # Validate arguments\n  if (missing(x)) { stop(\"Plot object not specified\") }\n  if (missing(f)) { stop(\"Filename not specified\") }\n  \n  # Set working directory based upon version (ver) of the plot\n  homeDir <- Sys.getenv(\"PROJ_HOME\")\n\n  # Create plot directory if does not already exist and set working directory\n  if (!dir.exists(file.path(homeDir, figDir))) {\n    dir.create(file.path(homeDir, figDir), recursive = TRUE)\n  }\n  setwd(file.path(homeDir, figDir))\n  \n  # Save plot\n  suppressMessages(ggsave(filename = f, plot = x))\n  \n  # Reset working directory\n  homeDir <- Sys.getenv(\"PROJ_HOME\")\n  setwd(homeDir)\n}\n# ---- end\n\n\n\n# ---- makeTimeSeriesFunc\nmakeTimeSeries <- function(x) {\n  # Produces a line chart time series of of the 5-minute interval (x-axis) and the \n  # average number of steps taken, averaged across all days (y-axis)\n  #\n  # Args:     x - A dataframe containing the average number of steps taken by interval across all days\n  #\n  # Returns:  ggplot object containing the timeseries plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n  \n  # Calculate the time of maximum step activity\n  maxInterval <- calcInterval(x)\n  \n  # Prepare and render line chart to screen\n  l <- ggplot(x, aes(x=interval, y=steps)) +\n    geom_line(colour=\"blue\") +\n    xlab(\"5-Minute Interval\") +\n    ylab(\"Average Steps\") +\n    labs(title = \"Average Daily Activity Pattern\") +\n    theme_bw(base_family = \"sans\") + \n    annotate(\"text\", x=835,y=220, \n             label = paste(\"5-Min interval with highest average number of steps begins at\", maxInterval), \n             colour=\"red\")\n  \n  suppressMessages(print(l))\n  \n  return(l)\n}\n# ---- end\n\n\n# ---- calcIntervalFunc\ncalcInterval <- function(x) {\n  # The function determines Which 5-minute interval, on average across all the days in the dataset, \n  # contains the maximum number of steps?  \n  #\n  # Args:   x - a dataframe containing the average number of steps per 5-minute interval\n  #\n  # Returns; Character variable containing the 5-minute interval with highest average number of steps\n  \n  steps <- x$steps\n  maxSteps <- max(steps)\n  maxRow <- filter(x, steps == maxSteps)\n  maxInterval <- maxRow$interval\n  maxInterval <- gsub('^([0-9]{1,2})([0-9]{2})$', '\\\\1:\\\\2', sprintf('%04d',maxInterval))\n  return(maxInterval)\n}\n# ---- end\n\n\n# ---- imputeFunc\nimpute <- function(x, stepsByInterval, f) {\n  # This function imputes missing step count data by substituting the mean for the associated \n  # 5-minute time interval across all days.\n  #\n  # Args:\n  #   x - the original activities data frame\n  #   stepsByInterval - a dataframe containing the average number of steps per 5-minute interval\n  #   f - the name of the file in which the imputed data frame will be saved\n  #\n  # Returns: new activities data frame with missing values imputed\n  \n  # Validate arguments \n  if (missing(x)) { stop(\"Activities file must be provided\") }\n  if (missing(stepsByInterval)) { stop(\"stepsByInterval dataframe must be provided\")}\n  if (missing(f)) { stop(\"The filename for the imputed data frame must be provided\")}\n  \n  # Make a copy of the activities data frame passed as an argument\n  newdf = data.frame(x)\n\n  # The approach here is to merge the newActivities and  stepsByInterval data frames. This will \n  # add a column to each row in newActivities with the average steps for the time interval.  \n  newdf <- merge(newdf, stepsByInterval, by = \"interval\")\n  \n  # Next, we use the ifelse construct to identify missing values and to replace them with the average value \n  # in the column just added.  \n  newdf <- transform(newdf, steps.x = ifelse(is.na(steps.x), steps.y, steps.x))\n  \n  #Remove the extra averages column and reset the column names.\n  newdf$steps.y <- NULL\n  names(newdf) <- c(\"interval\", \"steps\", \"date\")\n  \n  # Set the directory where this processed data set is to be saved.\n  dataDir <- \"/Data/Processed Data\"\n\n  # Create data directory if does not already exist and set working directory\n  if (!dir.exists(file.path(homeDir, dataDir))) {\n    dir.create(file.path(homeDir, dataDir), recursive = TRUE)\n  }\n  setwd(file.path(homeDir, dataDir))\n  \n  # Save data set\n  write.csv(newdf, file=f)\n  \n  # Reset working directory\n  setwd(homeDir)\n  \n  return(newdf)\n  \n}\n# ---- end\n\n# ---- conjoinFunc\nconjoin <- function(x, y) {\n  # This function conjoins the raw and processed versions of the activities file.  A categorical variable is \n  # created for each row, indicating to which original file the row belongs. All NA rows are removed from the \n  # combined data frame.\n  #\n  # Args:\n  #   x - the original activities data frame\n  #   y - the processed activities file with missing values imputed\n  #\n  # Returns: a ggplot, boxplot object\n  \n  # Add categorical variable to both files.\n  x$source <- \"Raw Data\"\n  x$source_order <- 1\n  y$source <- \"Processed Data\"\n  y$source_order <- 2\n\n  # Bind both data frames\n  z = rbind(x,y)\n  \n  # Remove all NA rows\n  z  <- z[complete.cases(z),]\n  \n  return(z)\n}\n# ---- end  \n\n\n# ---- makeDensityPlotFunc\nmakeDensityPlot <- function(x) {\n  # Produces overlapping, semi-transparent density plots grouped by data source. \n  #\n  # Args:     x - A combined data frame including both raw and processed data\n  #\n  # Returns:  ggplot object containing the density plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n  \n  # Prepare and render density plots to screen\n  d <- ggplot(x, aes(x=steps, fill=source)) +\n    geom_density(alpha=.3) +\n    ylab(\"Density\") +\n    xlab(\"Total Steps per Day\") +\n    scale_fill_discrete(name=\"Data Source\") +\n    labs(title = \"Raw versus Processed Data Density Average Total Daily Steps\") \n  suppressMessages(print(d))\n  return(d)\n}\n\n# ---- end\n\n\n# ---- makeOverlaidHistFunc\nmakeOverlaidHist <- function(x) {\n  # Produces overlapping, semi-transparent histogram plots grouped by data source. \n  #\n  # Args:     x - A combined data frame including both raw and processed data\n  #\n  # Returns:  ggplot object containing the histogram plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n  \n  # Find the mean of each group\n  meansData <- ddply(x, \"source\", summarise, stepsMean=mean(steps))\n  \n  \n  # Prepare and render density plots to screen\n  d <- ggplot(x, aes(x=steps, fill=source), environment = environment()) +\n    geom_histogram(alpha=.3, position=\"identity\") +\n    geom_vline(data=meansData, aes(xintercept=stepsMean,  colour=source),\n             linetype=\"dashed\", size=1) +\n    ylab(\"Frequency\") +\n    xlab(\"Total Steps per Day\") +\n    scale_fill_discrete(name=\"Data Source\") +\n    scale_colour_discrete(name=\"Data Source\") +\n    labs(title = \"Raw versus Processed Histogram of Average Total Daily Steps\")\n  suppressMessages(print(d))\n  return(d)\n}\n# ---- end\n\n\n# ---- compareStatsFunc\ncompareStats <- function(x,y) {\n  # Produces a table containing the difference in summary statistics between two tables containing summary statistics. \n  #\n  # Args:     x - A data table containing summary statistics\n  #           y - A data table containing summary statistics\n  #\n  # Returns:  a data table comparison of the summary statistics contained in x and y\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Summary statistic data table x must be provided\") }\n  if (missing(y)) { stop(\"Summary statistic data table y must be provided\") }\n  \n  \n  # Create the comparative table\n  z <- merge(x,y, by = \"Measure\")\n  z <- mutate(z, \n         Difference = round((z$Steps.y - z$Steps.x),2),\n         Pct_Difference = paste(round(((z$Steps.y-z$Steps.x)/z$Steps.x)*100,2),\"%\"))\n  arrange(z, No.x)\n  z <- select(z, No.x, Measure, Steps.x, Steps.y, Difference, Pct_Difference)\n  names(z) <- c(\"No\", \"Measure\", \"Raw\", \"Processed\", \"Difference\", \"Pct Difference\")\n  \n  return(z)\n  \n}\n# ---- end\n  \n\n# ---- makeBoxPlotFunc\nmakeBoxPlot <- function(x,s) {\n  # Produces side-by-side box plots grouped by data source. \n  #\n  # Args:     x - A combined data frame including both raw and processed data\n  #           s - Data frame with summary statistics\n  #\n  # Returns:  ggplot object containing the histogram plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n  if (missing(s)) { stop(\"Summary statistics must be provided\") }\n  \n  # Reorder factors so that statistics for raw data appears on the left\n  x$source_id <- reorder(x$source, x$source_order)\n  \n  # Prepare and render boxplots to screen\n  b <- ggplot(x, aes(x=source_id, y=steps, fill=source)) +\n    geom_boxplot() +\n    guides(fill=FALSE) +\n    ylab(\"Steps\") +\n    xlab(\"Data Source\") +\n    scale_fill_discrete(name=\"Data Source\") +\n    labs(title = \"Average Total Daily Steps\") +\n    theme_classic()  \n  \n  # Prepare summary statistics table\n  s   <- arrange(s,No)\n  s   <- s %>% select(everything(), - contains(\"No\"))\n  tt  <- ttheme_minimal(base_size = 10)\n  t   <- tableGrob(s, theme=tt, rows=NULL)\n  \n  # Plot both graphs\n  x   <- grid.arrange(b,t, nrow=2)\n  print(x)\n\n  return(x)\n}\n# ---- end\n\n\n# ---- dayLabelFunc\ndayLabel <- function(x) {\n  # Create a new factor variable in the dataset with two levels -- \"weekday\" and\n  # \"weekend\" indicating whether a given date is a weekday or weekend day. \n  #\n  # Args:     x - the processed activities data frame\n  #\n  # Returns:  dataframe modified to include the factor variable\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n\n  # Convert date \n  x$date <- as.Date(x$date, format=\"%Y-%m-%d\")\n  \n  # Create vector of weekend days\n  weekend <- c(\"Saturday\", \"Sunday\")\n\n  #Evaluate weekday and create a logical vector, with factor levels, labels\n  x$dayLabel <- factor((weekdays(x$date) %in%  weekend), \n                     levels=c(TRUE, FALSE), labels=c('Weekend', 'Weekday'))\n  return(x)\n\n}\n# ---- end\n\n\n# ---- summateWdFunc\nsummateWd <- function(x) {\n  # This function groups and summarizes the data by day label, and mean steps per 5-minute interval \n  #\n  # Args:\n  #   x: the dataframe to be summarized\n  #\n  # Returns: Data frame grouped and summarized by the requested statistic\n  \n  # Validate arguments\n  if (missing(x)) { stop(\"Data frame to be summarized must be provided\") }\n\n  # Perform summation\n  df <- x %>% group_by(dayLabel, interval) %>% summarize(steps = mean(steps))\n\n  return(df)\n}\n# ---- end\n\n\n\n# ---- makeTimeSeriesWdFunc\nmakeTimeSeriesWd <- function(x) {\n  # Produces a line chart time series of the 5-minute interval (x-axis) and the \n  # average number of steps taken, averaged across all days (y-axis) for both weekend and weekdays\n  #\n  # Args:     x - A dataframe containing the average number of steps taken by interval across all days\n  #\n  # Returns:  ggplot object containing the timeseries plot\n  \n  # Validate arguments.\n  if (missing(x)) { stop(\"Data argument must be provided\") }\n  \n  # Prepare and render line chart to screen\n  l <- ggplot(x, aes(x=interval, y=steps, group=dayLabel, colour=dayLabel)) +\n    geom_line() +\n    xlab(\"5-Minute Interval\") +\n    ylab(\"Average Steps\") +\n    labs(title = \"Average Daily Activity Pattern\") +\n    theme_bw(base_family = \"sans\") +\n    scale_colour_discrete(name=\"\") \n  suppressMessages(print(l))\n  return(l)\n}\n# ---- end\n",
    "created" : 1457225729727.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1298707542",
    "id" : "FB51D7E4",
    "lastKnownWriteTime" : 1457280085,
    "last_content_update" : 1457280085043,
    "path" : "~/Dropbox/Online Learning/Data Science/Data Science Specialization/5. Reproducible Research/Week 1 Project/Code/Final Scripts/func.R",
    "project_path" : "Code/Final Scripts/func.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}